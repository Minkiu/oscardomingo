#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
clone_dir="~/oscardomingo"
clone_dir="${clone_dir/#\~/$HOME}"
output_dir="~/oscardomingo.com-test"
clone_dir="${output_dir/#\~/$HOME}"
repo_url="https://github.com/Minkiu/oscardomingo.git"
zola_bin="~/oscardomingo/bin/zola-v0.18.0-x86_64-unknown-linux-gnu"
zola_bin="${zola_bin/#\~/$HOME}"

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-c] [-p] [-f]

Clone $repo_url and/or build it to a $output_dir.

Available options:

-h, --help      Print this help and exit
-c, --clone     Clone the repository and pull latest.
-p, --pull      Attempt to pull lates changes form repo.
-f, --force     When cloning, wipe local directory. When building, remove contents of outupt dir.
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  clone=0
  pull=0
  build=0
  force=0

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    --no-color) NO_COLOR=1 ;;
    -c | --clone) clone=1 ;;
    -p | --pull) pull=1 ;;
    -b | --build) build=1 ;;
    -f | --force) force=1 ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  if [[ "$clone" -eq "0" ]] && [[ "$pull" -eq "0" ]] && [[ "$build" -eq "0" ]]
  then
    usage
  fi
  return 0
}

parse_params "$@"
setup_colors

clone_repo () {
    # Attempt to clone the github repository.
    if [[ ! -d "$clone_dir" ]]
    then
        # No local dir, we clone it.
        /usr/bin/git clone $repo_url $clone_dir
    elif [[ -d "$clone_dir" ]] && [[ $force == 1 ]]
    then
        # Local dir exists, but force flag is enabled.
        rm -rf $clone_dir
        /usr/bin/git clone $repo_url $clone_dir
    else
        # Local dir exists.
        die "Local directory already exist. User --force to delete it, and clone again."
    fi
}

pull_repo () {
    if [[ ! -d "$clone_dir" ]]
    then
        echo "Repo directory does not exist, cloning it."
        clone_repo
    else
        (cd $clone_dir && /usr/bin/git checkout main && /usr/bin/git fetch && /usr/bin/git pull)
    fi
}

build_site () {
    echo "$output_dir"
    echo "$force"
    if [[ ! -d "$clone_dir" ]]
    then
        die "Repository is missing, you have to clone it first."
    fi

    if [[ -d "$output_dir" ]]
    then
        echo "OUTPUT DIR EXISTS"
        if [[ $force == 1 ]]
        then
            echo "rm -rf $output_dir"
            echo "$zola_bin --root $clone_dir --output-dir $output_dir "
        else
            die "Output dir already exists. Run -f to clear it."
        fi
    else
        echo "bleh"
        echo "$zola_bin --root $clone_dir --output-dir $output_dir "
    fi

}

if [[ $clone == 1 ]]
then
    echo "clone_repo"
    clone_repo
elif [[ $pull == 1 ]]
then
    echo "pull_repo"
    pull_repo
elif [[ $build == 1 ]]
then
    echo "build_site"
    build_site
fi
